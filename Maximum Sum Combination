!!! its 1010/1100 test cases passed...


You are given two integer arrays a[] and b[] of equal size. A sum combination is formed by adding one element from a[] and one from b[], using each index pair (i, j) at most once. Return the top k maximum sum combinations, sorted in non-increasing order.

Examples:

Input: a[] = [3, 2], b[] = [1, 4], k = 2
Output: [7, 6]
Explanation: Possible sums: 3 + 1 = 4, 3 + 4 = 7, 2 + 1 = 3, 2 + 4 = 6, Top 2 sums are 7 and 6.
Input: a[] = [1, 4, 2, 3], b[] = [2, 5, 1, 6], k = 3
Output: [10, 9, 9]
Explanation: The top 3 maximum possible sums are : 4 + 6 = 10, 3 + 6 = 9, and 4 + 5 = 9
Constraints:
1 ≤ a.size() = b.size() ≤ 105
1 ≤ k ≤ a.size()
1 ≤ a[i], b[i] ≤ 104

Expected Complexities
Time Complexity: O(n log n)
Auxiliary Space: O(n)


class Solution {
  public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
        // code here
        int n=a.size();
        vector<int> sums;
        vector<int>res;
        int i=0;
    while(i<n){
         for(int j=0;j<n;j++){
             int sum=a[i]+b[j];
             sums.push_back(sum);
            
         }
         i++;
    }
        
         priority_queue<int> pq;
         for(auto it:sums){
             pq.push(it);
         }
         for(int i=0;i<k;i++){
             res.push_back(pq.top());
             pq.pop();
             
         }
         return res;
        
        
    }
};
