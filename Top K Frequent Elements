Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:

Input: nums = [1,1,1,2,2,3,3,4,4,4,5], k = 2
Output: [1,2,3,4]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

Seen this question in a real interview before?
1/5
Yes
No

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n=nums.size();
        unordered_map<int,int> mpp;
        vector<int> res;
        for(auto it:nums){
             mpp[it]++;
        }
        priority_queue < pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        for(auto it: mpp){
            pq.push({it.second,it.first});
            if(pq.size()> k){
                pq.pop();
            }
        }

        while(!pq.empty()){
             
             res.push_back(pq.top().second);
             pq.pop();
        }
        return res;
    }
   
};
